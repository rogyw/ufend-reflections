What happens when you initialize a repository? Why do you need to do it?
Git initialises an empty repository data structure (a hidden .Git folder)  which is used to store extra data related to commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
Staging area offers an area where you can collect a subset of files which contain files whitch relate to the next commit you want to make. You can seperate out which files you want to update. The working directory can be a different version or contain other edited files not to be included in the next commit. It offers the advantage of easier management of multiple files in commits.

How can you use the staging area to make sure you have one commit per logical change?

The staging area allows you to select a subset of files changed. It also allows you to compare what changes are in the staged area - by using git diff --staged to see what is different between staged and most recent commit. git status also helps identify what files are in staged area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches are helpful when you want to try adding a new feature which is speperate to the main program. For example when you need to release fixes to a live system while working on a side project to add another feature or when you are working in a team. it allows you to seperate the changes and have multiple commits on a speperate branch - and leave the original in its working state.
Branches compartmentalise and allow work to be donw seperately from the main branch.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
